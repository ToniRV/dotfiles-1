#!/bin/bash
platform='unknown'
unamestr=`uname`

if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
    platform='osx'
else
    echo Unknown plateform
    exit 1
fi

if [[ $platform == 'osx' && -d ~/Library/Mobile\ Documents/com~apple~CloudDocs/.dotfiles ]]; then
    ln -sfv ~/Library/Mobile\ Documents/com~apple~CloudDocs/.dotfiles ~/.dotfiles
fi

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/roddehugo/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="git@github.com:roddehugo/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "Downloading dotfiles...\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/brew
source ./lib/gem
source ./lib/npm
source ./lib/pip
source ./lib/configure

source ./shell/bash.d/colors
source ./shell/bash.d/utils

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

mkdir -p /usr/local
sudo chown ${USER} /usr/local

if [[ $platform == 'osx' ]]; then
    # Before relying on Homebrew, check that packages can be compiled
    if ! type_exists 'gcc'; then
        e_header "Installing the XCode Command Line Tools"
        xcode-select --install
    fi

    # Check for Homebrew
    if ! type_exists 'brew'; then
        e_header "Installing Homebrew"
        ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
        e_header "Updating Homebrew"
        brew update
    fi
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Installing Git"
    if [[ $platform == 'osx' ]]; then
        brew install git
    else
        sudo apt-get install git
    fi
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository"
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles"
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
fi

# Install and update packages
if [[ $no_packages ]]; then
    printf "Skipped package installations.\n"
else
    printf "Updating packages...\n"
    # Install Homebrew formulae
    run_brew
    # Install Gem packages
    run_gem
    # Install Node packages
    run_npm
    # Install Pip packages
    run_pip
    # Configure installed packages
    run_configure
fi

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

pre_mirrorfiles() {
    # Create tmux folders
    [[ ! -d ~/.tmux/plugins ]] && mkdir -p ~/.tmux/plugins
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

    # Do the same for vim
    [[ ! -d ~/.vim/bundle ]] && mkdir -p ~/.vim/bundle
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "shell/bash.d"                 ".bash.d"
    link "shell/bash_profile"           ".bash_profile"
    link "shell/bash_profile.private"   ".bash_profile.private"
    link "shell/bashrc"                 ".bashrc"
    link "shell/curlrc"                 ".curlrc"
    link "shell/gemrc"                  ".gemrc"
    link "shell/npmrc"                  ".npmrc"
    link "shell/hushlogin"              ".hushlogin"
    link "shell/inputrc"                ".inputrc"
    link "shell/wgetrc"                 ".wgetrc"
    link "editor/editorconfig"          ".editorconfig"
    link "editor/editorthemes"          ".editorthemes"
    link "vim/vimrc"                    ".vimrc"
    link "ssh"                          ".ssh"
    link "tmux/tmux.conf"               ".tmux.conf"
    link "tmux/theme.sh"                ".tmux/theme.sh"

    e_success "Dotfiles update complete!"
}

post_mirrorfiles() {
    # Source tmux configuration to install plugins
    tmux source ~/.tmux.conf

    # Install vim plugins
    vim +PluginInstall +qall

    # Finally source bash_profile
    source ${HOME}/.bash_profile
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    pre_mirrorfiles
    mirrorfiles
    post_mirrorfiles
else
    printf "Aborting...\n"
    exit 1
fi

if [[ $platform == 'osx' ]]; then
    # Ask before potentially overwriting OS X defaults
    seek_confirmation "Warning: This step may modify your OS X system defaults."

    if is_confirmed; then
        bash ./bin/osxdefaults
        e_success "OS X settings updated! You may need to restart."
    else
        printf "Skipped OS X settings update.\n"
    fi

    open "http://sourabhbajaj.com/mac-setup/SystemPreferences/README.html"
fi

